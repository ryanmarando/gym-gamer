// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String
  createdAt       DateTime          @default(now()) @map("created_at")
  password        Password?
  level           Int               @default(1)
  levelProgress   Int               @default(0)
  xp              Int               @default(0)
  weightEntries   UserWeightEntry[]
  workouts        UserWorkout[]
  createdWorkouts Workout[]
  progressPhotos  ProgressPhoto[]
  achievements    UserAchievement[]

  @@map("user")
}

model Password {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workout {
  id              Int           @id @default(autoincrement())
  name            String
  createdByUserId Int?
  createdBy       User?         @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  users           UserWorkout[]
}

model UserWorkout {
  userId    Int
  workoutId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  entries WorkoutEntry[]

  @@id([userId, workoutId])
}

model WorkoutEntry {
  id Int @id @default(autoincrement())

  userId    Int
  workoutId Int

  userWorkout UserWorkout @relation(fields: [userId, workoutId], references: [userId, workoutId], onDelete: Cascade)

  weight Float
  date   DateTime @default(now()) @map("created_at")
}

model ProgressPhoto {
  id        Int      @id @default(autoincrement())
  userId    Int
  imagePath String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AchievementType {
  WORKOUT
  STREAK
  PERSONAL_BEST
  SEASONAL
  SOCIAL
  MILESTONE
}

model Achievement {
  id         Int             @id @default(autoincrement())
  name       String
  xp         Int
  descprtion String?
  isQuest    Boolean         @default(false)
  deadline   DateTime?
  goalAmount Float?
  goalType   AchievementType

  users UserAchievement[]
}

model UserAchievement {
  userId        Int
  achievementId Int

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  progress  Float   @default(0)
  completed Boolean @default(false)

  @@id([userId, achievementId])
}

model UserWeightEntry {
  id        Int      @id @default(autoincrement())
  weight    Float
  enteredAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
